1. [ TypeSript ] 설치 (Node.js)

타입스크립트 설치를 위해서는 Node.js가 설치되어 있어야한다.

https://nodejs.org/ko/download/

1. 폴더 생성
프로젝트 폴더 생성 후 폴더 내에서 
[ npm init ] 
명령어를 수행한다.

2. 타입스크립트 설치
[ npm install typescript ]

package.json에 dependencies부분의 typescript가 추가되며 node_modules 폴더가 생성되며 설치된다.

3. ts-node 설치
타입스크립트를 Node에서 실행시킬 수 있는 런타임을 설치한다.
ts-node가 ts를 js로 컴파일하고 js를 실행시키도록 도와준다.

[ npm install ts-node --save-dev ]

4. tsconfig.json 생성
타입스크립트 컴파일에 대한 설정을 담은 json파일을 루트폴더에 생성한다.

//tsconfig.json

{
    "compilerOptions" : {
        "strict" : true,
        "module" : "commonjs",
        "moduleResolution" : "node",
        "lib" : ["es2015", "es2016", "es2017", "es2018", "es2019", "es2020"],
        "target" : "es5",
        "outDir" : "./dist",
        "esModuleInterop" : true
    },
    "exclude" : ["node_modules"],
    "include" : ["src/**/*"]
}

5. 실행

5-1. 컴파일
루트 폴더 아래에 src폴더 생성 후 ts파일을 만들어준 후 명령어를 실행한다.
아래 명령어를 통해 config파일에 설정했던 dist폴더 아래에 js로 변환된 파일이 생성된다.
[ npx tsc ]

5-2. 실행
node 명령어를 이용해 js파일을 실행한다.
[ node dist/index.js ]

또는 ts-node로 바로 실행할 수 있다. 다만 컴파일한 후 생성되는 dist/index.js는 생성되지 않는다.
[ npx ts-node src/index.ts ]

6. 자동화
package.json의 script에 작성해 컴파일과 실행을 한번에 수행할 수 있다.

{
	...
	"scripts": {
		"start" : "tsc && node dist/index.js",
		...
	},
	...
}

그 후 아래의 명령어를 실행하면 컴파일 후 바로 node로 실행을 하게된다.
[ npm run start ]

7. Vue.js 적용
기존의 Vue프로젝트에 타입스크립트를 적용하기 위해서는 Vue의 버전이 3인 것을 권장한다. Vue2에서는 각종 라이브러리를 사용해야하는 경우가 생기고 지원하지 않아 구현이 불가능한 부분도 생기기 때문에 정식으로 지원받는 버전으로 사용하는 것을 지향한다.

7-1. Vue.js에 설치
기존의 프로젝트 폴더에서 아래의 명령어를 실행시킨다.
[ vue add typescript ]

- main.ts : 기존 main.js
- sihms-vue.d.ts : 티입스크립트의 Helper 파일이다. vue에서 일어나는 일들에 대해 정의가 있다. 수정이 불필요하다.

7-2. 컴포넌트에 타입스크립트 적용방법
- 스크립트에 lang = "ts" 추가
- 헬퍼 메서드 import 후 적용 (script setup의 경우 필요없음)

<script lang="ts">
	import {defineComponent} from 'vue';
	
	export default defineComponent({
		data(){
			return{}
		}
	});
</script>



2. [ TypeScript ] 기본 문법

1. 기본 타입
Boolean, Number, String, Object, Array, Tuple, Enum, Any, Void, Null, Undefined, Never

1-1. 변수에 적용
let str: string = 'hi';
let num: number = 100;
let arr: Array = [1,2,3];
let obj: Object = {};
let obj2: {name:string, age:number} = {
	name:'dalsae',
	age : 10
}

1-2. 함수에 적용
/*함수의 리턴 타입을 지정할 수 있다.*/
function add(age:number, name:string):string{
	return name + ' is ' + age + ' years old.';
}

/*옵셔널 파라미터*/
/*함수 인자에 [?] 있을 시 파라미터로 들어올 수도 있고 안들어올 수도 있음을 의미*/
function log(a:string, b?:string, c?:string){
	console.log(a);
}

/*Union 타입*/
매개 변수에 설정 가능한 타입을 number, string 등 다양한 타입을 가능하게 하기 위해 만들어진 타입이다. 파이프(|)를 사용해 설정한다.

function setInfo(id:number|string, name:string){
	return {id, name}
}

/*Imtersection 타입*/
자바스크립트의 AND 연산자와 같은 의미이며 각각의 모든 타입이 포함된 객체를 넘기지 않으면 오류가 발생한다.

1-3. 그 외
기본 타입 중에 자바스크립트에 존재하지 않는 타입은 아래와 같다.

- Tuple
배열의 타입 순서와 길이를 지정할 수 있다. 튜플의 타입 순서에 맞지 않게 데이터를 넣으려고 하면 에러가 발생하지만 push 메서드를 사용할 경우 문제 없이 배열의 길이가 늘어난다는 맹점이 있다.

let arr:[string, number] = ['heonji', 28];

//문제 없음
arr = ['hihi', 15];

//문제 발생
arr = [32, 45];
/**
 *  RESULT : 
 *  src/index.ts:10:8 - error TS2322: Type 'number' is not assignable to type 'string'.
 *
 *  10 arr = [32, 45];
 *            ~~
 *  Found 1 error in src/index.ts:10
 * 
 */

//push메서드를 사용할 경우 문제 없이 데이터가 들어감
arr.push('fake');
console.log(arr);

/**
 * RESULT : 
 * [ 'hihi', 19, 'fake' ]
 */
 
- Enum
Number 또는 String 값 지밥에 고정된 이름을 부여할 수 있는 타입이다. 값의 종류가 일정한 범위로 지정되어 있는 경우 유용하며 기본적으로 0부터 시작해 1씩 증가한다.

enum Shoes{
    Nike = "나이키",
    Adidas = "아디다스"
}

console.log(Shoes)

/**
 * RESULT : 
 * { Nike: '나이키', Adidas: '아디다스' }
 */
 
- Any
모든 데이터 타입을 허용한다.

- Void
변수에는 undefined와 null만 할당하고 함수에는 리턴 값을 설정할 수 없는 타입이다. 함수의 리턴 값을 void로 설정할 경우 undefined를 return한다.

const fnTest = (phrase : string): void => {
    console.log(phrase);
}

let test:void;
let result = fnTest('hihi');

console.log(test, result);

/**
 * RESULT : 
 * undefined, undefined
 */

- Never
특정 값이 절대 발생할 수 없을 때 사용한다.
never은 일반적으로 함수의 리턴 타입으로 사용된다. 함수의 리턴 타입으로 never가 사용될 경우, 항상 오류를 출려가거나 리턴 값을 절대로 내보내지 않음을 의미한다.

[함수]

//항상 오류 발생
function invalid(message:string):never{
    throw new Error(message);
}

function fail(){
    return invalid('실패');
}

fail();


/**
 * RESULT : 
 *     throw new Error(message);
 *      ^
 *
 *      Error: 실패
 *          at invalid (D:\Github\heonji_portfolio\TypeScript\type-test\dist\index.js:3:11)
 *          at fail (D:\Github\heonji_portfolio\TypeScript\type-test\dist\index.js:6:12)
 *          at Object.<anonymous> (D:\Github\heonji_portfolio\TypeScript\type-test\dist\index.js:8:1)
 *          at Module._compile (node:internal/modules/cjs/loader:1105:14)
 *          at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10)
 *          at Module.load (node:internal/modules/cjs/loader:981:32)
 *          at Function.Module._load (node:internal/modules/cjs/loader:822:12)
 *          at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:77:12)
 *          at node:internal/main/run_main_module:17:47
 */
 
[변수]
let never_type:never;

//함수의 반환 값이 never이기 때문에 오류 발생하지 않음
never_type = (():never => {throw new Error("Error")})();


/**
 * RESULT : 
 *     never_type = (function () { throw new Error("Error"); })();
 *                                  ^
 *      Error: Error
 *          at D:\Github\heonji_portfolio\TypeScript\type-test\dist\index.js:9:35
 *          at Object.<anonymous> (D:\Github\heonji_portfolio\TypeScript\type-test\dist\index.js:9:57)
 *          at Module._compile (node:internal/modules/cjs/loader:1105:14)
 *          at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10)
 *          at Module.load (node:internal/modules/cjs/loader:981:32)
 *          at Function.Module._load (node:internal/modules/cjs/loader:822:12)
 *          at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:77:12)
 *          at node:internal/main/run_main_module:17:47
 */
 
 
 
 
 기본문법 2 (인터페이스)

1. 인터페이스
JavaScript 같은 동적 타입 언어 환경에서는 인터페이스를 다루지 않지만 타입스크립트와 같이 정적 타입 언어에서는 타입 검사가 요구되어 인터페이스를 지원한다. 인터페이스는 타입을 정의한 규칙을 의미한다.

interface ButtonInterfase {
	onInit():void;
	onClick():void;
}

사용하는 방법은 사용자 정의 타입과 비슷하지만 인터페이스의 경우 인터페이스 선언을 병합할 수 있다.

interface ButtonInterfase {
	onInit():void;
	onClick():void;
}

...

interface ButtonInterfase{
	onToggle?():void;		//?를 사용해 옵셔널하게 사용할 수 있다.
}

사용자 정의 타입에서는 선언이 중복되면 오류가 난다.

1-1. 인터페이스 예시

- 활용

interface User{
	age:number;
	name:string
}

let person:User = {
	age : 39,
	name : 'kim'
}

function getUser(user:User){
	console.log(user);
}

- 인덱싱
interface StringArray{
	[index:number]:string;
}

let arr2:StringArray = ['a','b','c'];
arr[0] = 10 // Error

- 딕셔너리 패턴
interface StringDictionary{
	[key:string]:string
}

let obj:StringDictionary = {
	name : 'hihi',
	age : 33	//에러
}

- 인터페이스 확장

interface Person{
    name :string,
    age : number
}

interface User extends Person{
    language:string;
}

let obj:User = {
    name:'dalsae',
    age : 28,
    language:'ko'	//:Person일 경우 에러
}

- implements
인터페이스는 정의를 하는 공간이며 정의한 인터페이스를 구현하는 공간은 클래스 안이다. 클래서에서는 인터페이스를 implements하여 구현해준다.

interface ButtonInterfase{
	onInit():void;
	onClick():void;
	value:string
}

//interface에서 정의한 것들은 반드시 클래스 내에 있어야한다.
class Button implements하여 ButtonInterfase{
	
	value:string = "적용";
	
	onInit():void{
	}
	onClick():void{
	}
}

- 객체 리터럴
클래스에서 implements 키워드를 사용해 인터페이스를 설정하는 방법이 아닌 객체 리터럴에 인터페이스를 설정할 수 있다.

interface ButtonInterfase{
	onInit():void;
	onClick():void;
	value:string
}

const TestButton:ButtonInterface = {
    onInit():void {},
    onClick():void {},
    value : '테스트',
	settings():void {}	//오류발생
}

- 시그니처
위의 객제 리터럴에서 보았듯이 객체에 인터페이스를 적용했을 경우 새로운 속성을 추가했을 때 클래스와 달리 오류가 발생한다. 이것은 타입스크립트가 정의되어있지 않은 동적 타입이 할당되는 것을 오류로 보기 때문이다. 이 문제를 해결하기 위해서 tsconfig.json 파일을 수정하거나 시그니처 속성을 선언하는 두가지 방법이 있다.

1) tsconfig.json
noImlictAny 옵션 값을 false로 변경하는 것이다. 하지만 암묵적으로 any 타입을 피하고자 한다면 좋은 방법은 아니다.

{
	"compilerOptions":{
		...
		"noImplicitAny" : false
		...
	}
}

2) 시그니처
객체의 새로운 추가 속성을 명시적으로 any 타입으로 설정한 것으로 오류를 출력하지 않는다.

interface ButtonInterfase{
	onInit():void;
	onClick():void;
	value:string;
	[prop:string] : any;	//인덱스 시그니처
}



